//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Vector.msg.
//

#ifndef __VECTOR_M_H
#define __VECTOR_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Vector;
/**
 * Class generated from <tt>Vector.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class Vector extends cOwnedObject
 * {
 *     double val[];
 * }
 * </pre>
 */
class Vector : public ::omnetpp::cOwnedObject
{
  protected:
    double *val = nullptr;
    size_t val_arraysize = 0;

  private:
    void copy(const Vector& other);

  protected:
    bool operator==(const Vector&) = delete;

  public:
    Vector(const char *name=nullptr);
    Vector(const Vector& other);
    virtual ~Vector();
    Vector& operator=(const Vector& other);
    virtual Vector *dup() const override {return new Vector(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setValArraySize(size_t size);
    virtual size_t getValArraySize() const;
    virtual double getVal(size_t k) const;
    virtual void setVal(size_t k, double val);
    virtual void insertVal(size_t k, double val);
    [[deprecated]] void insertVal(double val) {appendVal(val);}
    virtual void appendVal(double val);
    virtual void eraseVal(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Vector& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Vector& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Vector *fromAnyPtr(any_ptr ptr) { return check_and_cast<Vector*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VECTOR_M_H

